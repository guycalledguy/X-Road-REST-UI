buildscript {
    ext {
        springBootVersion = '2.1.3.RELEASE'
        openapiGeneratorVersion = '4.0.1'
        nodePluginVersion = '1.3.1'
        nodeVersion = '10.16.1'
        npmVersion = '6.9.0'
        springCloudSleuthVersion = '2.1.3.RELEASE'
    }
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath "org.openapitools:openapi-generator-gradle-plugin:${openapiGeneratorVersion}"
        classpath "com.moowork.gradle:gradle-node-plugin:${nodePluginVersion}"
        classpath "io.spring.gradle:dependency-management-plugin:0.5.2.RELEASE"
    }
}

configurations {
    compile {
        exclude group: 'org.hibernate', module: 'hibernate-hikaricp'
    }
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
}

sourceSets {
    main {
        java.srcDirs = ['src/main/java', 'build/generated-sources']
    }
}

ext.excludeDevToolsSetting = project.hasProperty('activate-devtools-do-not-use-in-production') ? false : true

if (!excludeDevToolsSetting) {
    ant.input(message: 'Are you sure you want to include development tool dependencies in built jar?\n'
        + 'Development tools must not be included in non-development environments', validargs: 'y,n', addproperty: 'confirmation')

    if(ant.confirmation != 'y') {
        throw new GradleException('Stopped build since not building development version\n'
        + 'environments')
    }
}

apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: "com.moowork.node"
apply plugin: 'org.openapi.generator'

bootRun {
    jvmArgs = ["-Dspring.output.ansi.enabled=ALWAYS"]
    if (project.hasProperty('args')) {
        def params = project.args.tokenize(',')
        args = params
    }
}

bootJar {
    excludeDevtools = excludeDevToolsSetting
    if (!excludeDevToolsSetting) {
        appendix = "devtools"
    }
    println 'excludeDevTools in bootJar=' + excludeDevToolsSetting
}

processResources {
    from ('frontend/dist/') {
        into 'public/'
    }
}

ext['hibernate.version'] = '5.3.10.Final'
ext['hikaricp.version'] = '3.2.0'

node {
    download = true
    version = nodeVersion
    npmVersion = npmVersion
    npmWorkDir = file("frontend")
    nodeModulesDir = file("frontend/node_modules")
}

task buildFront(type: NpmTask, dependsOn: 'npmInstall') {
    onlyIf {
        !project.hasProperty('skip-frontend-build')
    }
    inputs.dir("frontend")
    outputs.dir("frontend/dist")
    args = ['run', 'build']
    execOverrides {
        it.workingDir = 'frontend'
    }
}

npmInstall.onlyIf { !project.hasProperty('skip-frontend-build') }

processResources.dependsOn 'buildFront'

clean.delete << file('frontend/node_modules')
clean.delete << file('frontend/dist')

openApiGenerate {
    generatorName = "spring"
    inputSpec = "$projectDir/src/main/resources/openapi-definition.yaml".toString()
    outputDir = "$buildDir/generated-sources".toString()
    apiPackage = "org.niis.xroad.restapi.openapi"
    modelPackage = "org.niis.xroad.restapi.openapi.model"
    systemProperties = [
        modelDocs: "false",
        apis: "", // must use empty strings instead of "true":
        // https://github.com/OpenAPITools/openapi-generator/tree/master/modules/openapi-generator-gradle-plugin
        models: ""
    ]
    configOptions = [
        interfaceOnly: "true"
    ]
}

// openApiGenerate creates sources to generated-sources/src/main/java, instead of
// generated-sources/ as e.g. common-util xjc. This causes problems for tooling (IntelliJ autoimports)
task fixGeneratedSourcesDirectory {
    doFirst {
        println 'moving generated sources to the root, instead of src/main/java'
        copy {
            from "$buildDir/generated-sources/src/main/java"
            into "$buildDir/generated-sources"
            include '**'
        }
        delete "$buildDir/generated-sources/src"
    }
}

compileJava.dependsOn 'fixGeneratedSourcesDirectory'
fixGeneratedSourcesDirectory.dependsOn tasks.openApiGenerate

// set license format to ignore generated java sources
task licenseFormatJava(type:nl.javadude.gradle.plugins.license.License) {
    source = fileTree('src/main/java')
}

task licenseTestJava(type:nl.javadude.gradle.plugins.license.License) {
    source = fileTree('src/main/java')
    check = true
}

licenseFormatMain.enabled = false
licenseMain.enabled = false

licenseFormat.dependsOn licenseFormatJava
licenseTest.dependsOn licenseTestJava

idea.module {
    excludeDirs -= file(buildDir)
    buildDir.listFiles({ d, f -> f != 'generated-sources' } as FilenameFilter).each { excludeDirs += it }
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-sleuth:${springCloudSleuthVersion}"
    }
}

dependencies {
    implementation project(':serverconf')
    implementation project(':common-ui')
    implementation('org.springframework.boot:spring-boot-starter-security')
    implementation('org.springframework.boot:spring-boot-starter-web')
    implementation('org.springframework.boot:spring-boot-starter-thymeleaf')
    implementation('org.springframework.boot:spring-boot-starter-actuator')
    implementation('org.springframework.boot:spring-boot-starter-data-jpa')
    implementation("org.springframework.boot:spring-boot-starter-cache")
    implementation('org.springframework.cloud:spring-cloud-starter-sleuth')
    implementation('org.kohsuke:libpam4j:1.11')
    implementation('org.postgresql:postgresql:42.2.5')
    implementation('org.apache.commons:commons-compress:1.18')
    implementation('wsdl4j:wsdl4j:1.6.3')
    implementation('org.apache.cxf:cxf-tools-validator:3.3.2')

    testImplementation('org.springframework.boot:spring-boot-starter-test')
    testImplementation('org.springframework.security:spring-security-test')
    testImplementation('org.hsqldb:hsqldb')

    developmentOnly("org.springframework.boot:spring-boot-devtools")
    if (!excludeDevToolsSetting) {
        developmentOnly project(':proxy-ui-api-devtools')
    }
    // openapi-generator related
    implementation('io.springfox:springfox-swagger2:2.8.0')
    implementation('io.springfox:springfox-swagger-ui:2.8.0')
    implementation('com.fasterxml.jackson.datatype:jackson-datatype-jsr310')
    implementation('org.openapitools:jackson-databind-nullable:0.1.0')
    implementation('javax.validation:validation-api')
    // /openapi-generator related
}
